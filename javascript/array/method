//splice
//配列作成
let arr = ["コーヒー", "紅茶", "コーラ", "オレンジシュース", "サイダー", "牛乳"];

//要素2以降全て抜き出す。 .splice()メソッド

let arr2 = arr.splice(2);

//抜き出した配列

arr2
(4) ["コーラ", "オレンジシュース", "サイダー", "牛乳"]

//元の配列は抜き出されて変更される

arr
(2) ["コーヒー", "紅茶"]

let arr = ["コーヒー", "紅茶", "コーラ", "オレンジシュース", "サイダー", "牛乳"];

//要素1から3つ分取り除き、そこへカフェオレ、ミルクティー、マッチャを挿入

let arr2 = arr.splice(1,3,"カフェオレ","ミルクティー","マッチャ");

//抜き出した配列

arr2
(3) ["紅茶", "コーラ", "オレンジシュース"]

//元の配列へは抜き出され、挿入されて変更を受ける

arr
(6) ["コーヒー", "カフェオレ", "ミルクティー", "マッチャ", "サイダー", "牛乳"]

//配列の中に特定の要素が含まれているか判断するメソッド
let arr = ["coffee,"milk","2"];

console.log(arr.includes("coffee");
console.log(arr.includes(2);
console.log(arr.includes("2");
console.log(arr.log("coffee",2);

//出力
//true
//false 2は"2"とはみなされない
//true
//false 開始位置が2であるため、なし

//一致する要素がある場合そのインデックスを返す 配列の先頭から探し　=== で一致しているか判断する。
//第二引数で、探索開始位置を指定可能。 なければ、-1を返す。
console.log(arr.indexOf("coffee"));
console.log(arr.indexOf(2));
console.log(arr.indexOf("2"));
console.log(arr.indexOf("coffee",1));
console.log(arr.indexOf("coffee",-1));

//出力
//0
//VM360:2 -1 ない 
//VM360:3 2　
//VM360:4 -1
//VM360:5 -1

//一致する要素がある場合そのインデックスを返す。　末尾から探し、　=== で一致しているか判断する.
//第二引数で探索開始位置を指定可能。
console.log(arr.lastIndexOf("coffee"));
console.log(arr.lastIndexOf(2));
console.log(arr.lastIndexOf("2"));
console.log(arr.lastIndexOf("coffee",1));
console.log(arr.lastIndexOf("coffee",-1));
//VM546:1 0
//VM546:2 -1
//VM546:3 2
//VM546:4 0
//VM546:5 0

//.map()は配列の繰り返し処理を行う。 引数にコールバック関数を使用して、処理後の値を配列として返す。
let arr = ["chocolate","cake","milk"];

arr.map(x => x+"2個");

//出力
// ["chocolate2個", "cake2個", "milk2個"]

//.filter(コールバック関数);でコールバック関数がtrueの時の要素を配列で返す。
const arr = [0,1,2,3,4,5,6];
arr.filter(x=>x%2===0);

//出力
//(4) [0, 2, 4, 6]

//メソッドチェーン

let arr = new Array(1,2,3,4);
arr.map((x,i) =>({i: i,n:x})).filter(x => x.n%2 ===0).forEach(x => console.log(`${x.i}番目は${x.n}`));
//出力
//0番目は0
//VM189:3 2番目は2
//VM189:3 4番目は4
//VM189:3 6番目は6
//配列に対して、まずmapメソッドでオブジェクトを格納した配列作成した後、filterメソッドでそのプロパティの一つが偶数であるオブジェクトを格納した配列
//を返し、最後にforEachでその配列を出力している。

//sort 配列の中身を並び替える。　何も指定しなければ、数値含めて辞書順に並び替えられる。
let arr = [7,7,9,10,11,12,13];
arr1 = arr.sort();
//出力
//(7) [10, 11, 12, 13, 7, 7, 9]
arr
//出力
//(7) [10, 11, 12, 13, 7, 7, 9]
//元の配列も並び替えられる。

//引数に比較関数（第一引数と第二引数に要素をとり、　戻り値が0より大きいか小さいかで順序を変更する
arr1.sort((a,b) =<a-b);
//出力
ordr//(7) [7, 7, 9, 10, 11, 12, 13]



