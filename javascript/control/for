//forループ繰り返し処理
//変数iを0に初期化(⓵)、変数iが5になるまで続ける、6になったらループを抜ける(⓶)。
//変数iを1ずつ上昇させる(⓷)。 for(初期化式(⓵);条件式(⓶);変化式(⓷)){処理}

for(let i=0 ; i<6 ; i++){
    console.log(`変数の値は${i}`);
}

/*出力
変数の値は0
変数の値は1
変数の値は2
変数の値は3
変数の値は4
変数の値は5
*/

//配列の要素をすべて取り出す、配列の.lengthプロパティを条件式に採用して要素数の繰り返し。
let arr = ["coffee","milk","tea","coke"];
for(let i=0 ; i<arr.length ; i++){
    console.log(`${i}番目の商品は「${arr[i]}」`);
}

/*出力
0番目の商品は「coffee」
1番目の商品は「milk」
2番目の商品は「tea」
3番目の商品は「coke」
*/

//for in 文利用 オブジェクトからプロパティ名を順不同で繰り返し取り出して変数に格納。
//配列の場合はインデックスを格納。
const item = {name: "curryrice", price: 500, today:"May30th"};

//変数の部分は定数変数でも可能。変数は文字列型となるため、プロパティは［］で取り出す。
for (let thing in item){
    console.log(`${thing} : ${item[thing]}`);
}

//出力
name : curryrice
price : 500
today : May30th

//for of 文利用 反復可能なオブジェクト({}オブジェクトリテラルは除く)から順番通りに取る
let number = [2,3,5,7];
let number2 = new Map([["coffee",2],["tea",3],["coke",5]]);

for (const num of number){
    console.log(num);
}
//出力　2,3,5,7

for (const num of number){
    console.log(num);
}
//出力　
//(2) ["coffee", 2]
//(2) ["tea", 3]
//(2) ["coke", 5]

//while 文　条件式がtrueな限り繰り返す。
let num = 0;

while(num < 11){
   
    console.log(num);
    
    num ++;
}
//出力
//0
// 1
// 2
//3
//4
// 5
// 6
// 7
// 8
// 9
// 10

//continue文でforの繰り返しを抜けて、変化式に戻る。whileならば条件式に戻る。
//ラベルと組み合わせることで、特定のforやwhileで処理を行える。
//ラベル文は　ラベル名: 文　で指定可能。　continueやbreakと一緒に利用
outer:
    for(let i =0 ; i<10;i++){
        for(let j =0; j<10; j++){
            console.log(i,j);
            if(i===1&&j===1){
                
                console.log("上の階層のforループに戻る");
                continue outer;
            }
         }
     }
     
//出力
//0 0
//VM43:4 0 1
//VM43:4 0 2
//VM43:4 0 3
//VM43:4 0 4
//VM43:4 0 5
//VM43:4 0 6
//VM43:4 0 7
//VM43:4 0 8
//VM43:4 0 9
//VM43:4 1 0
//VM43:4 1 1
//VM43:7 上の階層のforループに戻る
//VM43:4 2 0
//VM43:4 2 1
//以下略

//
