//関数の引数の仕様
function myFunc(argVariable){
    argVariable = 0;
}

myFunc(12);
console.log(argVariable);
//出力12 となり、関数スコープの外では変数の値は変更されない。


//関数の引数にオブジェクトを渡す場合
function myFunc(argobj){
    argobj.coffee = 400;
}

argobj = {coffee:500,milk:300,tea:250};
myFunc(argobj);
console.log(argobj);
//出力は{coffee: 400, milk: 300, tea: 250}となる。　すなわち、元のオブジェクトのプロパティ値は変更される。

//配列の場合も同様、要素を書き換えると呼び出し元でも内容は変わる。
function myFunc(argArray){
    argArray[0] = "coke";
}

argArray = ["coffee","milk","tea"];
myFunc(argArray);
console.log(argArray);
//出力　(3) ["coke", "milk", "tea"]

//関数へ引数を渡さないときは引数はundefinedとされる。
function myFunc(arg){
    console.log(`私の名前は${arg}です。`);
}

//

myFunc("花子");
myFunc();

//出力は
//私の名前は花子です。
//私の名前はundefinedです。

//一方多く渡された時は最初の引数のみ適用される。
myFunc("一郎","次郎","三郎","四郎");

//出力は
//私の名前は一郎です。

//引数が複数与えられた場合、呼び出すときに順番に渡される。
function myFunc(name, value){
    console.log(`${name}は${value}円になります。`);
}

myFunc("サイダー",100);
//出力は「サイダーは100円になります。」
myFunc("コーラ",200,300);
//出力は「コーラは200円になります。」
myFunc("コーヒー");
//出力は「コーヒーはundefined円になります。」 2つめがないためundefined適用

//引数に値が渡されないときやundefinedのためにデフォルト引数が指定可能。
//メニューを作る関数
function Menu(food="入力してください",price=0){
    const res = `商品名は${food}:価格は${price});
    return res
}

console.log(Menu("",200);
console.log(Menu();
???未指定の部分に何も書かないでカンマで飛ばす、クオーテーションを書くのかよく分からない。

//残余引数　...を使うことで、引数を大量にまとめて受け取ることが可能。
function myFunc(firstOrder,...restOrder){
    console.log(firstOrder);
    console.log(restOrder);
}

console.log(myFunc("coke","coffee","juice","tea"));
//出力はcoke
//(3) ["coffee", "juice", "tea"]

//argumentsオブジェクト
//引数がなくてもargumentsオブジェクトを用いることで、呼び出した際に、引数に値を入れられる。
function setmenu(){
    console.log(arguments.length);
    for (let i;i<6 ;i++){
        console.log(arguments[i]);
    }
}

let arr = ["coffee","coke","tea","milk","juice","caffeore","orangejuice","cheesecake"];
setmenu(...arr);
//出力
//8
//coffee
//VM146:4 coke
//VM146:4 tea
//VM146:4 milk
//VM146:4 juice
//VM146:4 caffeore
//足りなければ出力されず、多ければundefinedが返される。

//javascriptではthisは、厳格モード("use strict")でないとき、グローバルオブジェクトすなわち
//windowオブジェクトとなる。

function myFunc(){
    
    console.log("第一層",this);
    function myFunc2(){
        console.log("第二層",this);
        function myFunc3(){
            console.log("第三層",this);
        }
        myFunc3();
     }
     myFunc2()
 }
 
 
 console.log("グローバル",this);
 myFunc()

//出力
//グローバル Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM422:2 第一層 Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM422:4 第二層 Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM422:6 第三層 Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//出力は全てwindowオブジェクトになる。

//"use strict"を指定するとthisはundefinedになる。
'use strict'
 function myFunc(){
    
    console.log("第一層",this);
    function myFunc2(){
        console.log("第二層",this);
        function myFunc3(){
            console.log("第三層",this);
        }
        myFunc3();
    }
    myFunc2()
 }
 console.log("グローバル",this);
 myFunc()
//出力
//グローバル Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM1085:4 第一層 undefined
//VM1085:6 第二層 undefined
//VM1085:8 第三層 undefined

//メソッドの中でthisを用いた場合は、thisはそのオブジェクトを指定する。
let obj = { fnc: function(){
    console.log("メソッドの中",this);
    function fnc2(){
        console.log("メソッドの中の関数の中",this);
    }, 
    
    fnc2();},apple:2
};

console.log("グローバル",this);
obj.fnc()

//出力
//グローバル Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM37:2 メソッドの中 メソッドの中 {apple: 2, fnc: ƒ}
//VM37:4 メソッドの中の関数の中 Window {window: Window, self: Window, document: document, name: "", location: Location, …}

//メソッドの場合に'use strict'を利用した場合、メソッドの中で定義された関数はundefinedとなる。

'use strict'
let obj = { fnc: function(){
    console.log("メソッドの中",this);
    function fnc2(){
        console.log("メソッドの中の関数の中",this);
    }
    
    fnc2();
}};

console.log("グローバル",this);
obj.fnc()
//出力
//グローバル Window {window: Window, self: Window, document: document, name: "", location: Location, …}
//VM42:3 メソッドの中 {fnc: ƒ}
//VM42:5 メソッドの中の関数の中 undefined

//findを用いて引数にテスト関数（アロー関数式で記述）を投入して配列の要素を先頭から探索。条件に一致する最初の値を取り出す。なければ、undefinedを返す。
let array = [10,20,30,40,50];

console.log(array.find(x => x>=25));
console.log(array.find(x => x>=60);

//出力
//30
//VM237:4 undefined

//findIndexの場合はテスト関数でtrueとなる要素の位置を返す。無い場合は-1を返す。
let arr = [10,20,30,40,50];

console.log(arr.findIndex(x => x>=25));
console.log(arr.findIndex(x => x>=60));

//出力
//2
//-1

//everyメソッドを適用すると、配列の要素全てに対するテスト関数の結果がtrueのときはtrueを返す。
let arr = [10,20,30,40,50];

console.log(arr.every(x => x>=10));
console.log(arr.every(x => x>=20));

//出力
//true
//false

//someメソッドを用いると、配列の要素の内一つでもテスト関数の結果trueの場合はtrueを返す。)
console.log(arr.some(x=>50));
console.log(arr.some(x<10));

//出力
//true
//false

//反復処理メソッド
//.forEach(コールバック関数) 配列から要素を取り出し、コールバック関数で処理を行う。値が代入されていない要素は
//処理されない。

let arr = ["coffee","milk",,,,,,,"coke"];

arr.forEach((x,i)=>{
    console.log(`要素番号${i}のメニューは,${x}です`);
});

//出力
//要素番号0のメニューは,coffeeです
//VM378:4 要素番号1のメニューは,milkです
//VM378:4 要素番号8のメニューは,cokeです

//メソッド、getter,setterのオブジェクト内部への記述方法
//getter は値を取り出したときの内部での処理　setterは値を代入してオブジェクト内部処理を行う。

//三角関数を作成するオブジェクト
let triangle = {

    θ :Math.PI,

    cosin(arg1){
        return Math.cos(arg1);
    },

    get sin(){
        return Math.sin(this.θ);
    },

    get tan(){
        return Math.tan(this.θ);
    },

    get cos(){
        return Math.cos(this.θ);
    },

    get cosh(){
        return Math.cosh(this.θ);
    },

    get sinh(){
        return Math.sinh(this.θ);
    },

    set prop(x){
        this.θ = x;
    }
}
//出力
triangle.cosin(4);
//-0.6536436208636119
triangle.sin
//1.2246467991473532e-16
triangle.cos
//-1
triangle.cosh
//11.591953275521519
triangle.sinh
//11.548739357257748
triangle.prop = Math.PI/2;
//1.5707963267948966
triangle.sin
//1
triangle.cos
//6.123233995736766e-17


//アロー関数
//関数の新しい書き方。 functionや関数名を記述しない。 =>を用いる

let menu = ["chocolate", "cake","milk","coffee"];

menu.forEach(x => {
    if (x.length>4){
        console.log(x);
    }});
    
//出力
//chocolate
//coffee

//クロージャ　関数スコープ内以外の変数を取り込んだ関数。


function name(){
    let name1 = "hanako";
    
    function call(){
        console.log(`彼女の名前は${name1}`);
    }
    
    return call
}

let girl= name();

girl()
//出力
//彼女の名前はhanako
//下でも可能
function name(){
    let name1 = "hanako";
    
    function call(){
        console.log(`彼女の名前は${name1}`);
    }
    
    return call()
}

name()

//関数objectのメソッドを用いることで関数内部のthisをundefined以外の任意の値に設定可能。
//関数objectにthisの値を指定する。 .call(設定値,引数),.apply(設定値,引数)
function fnc1(arg1,arg2,arg3){
    console.log(this);
}
fnc1.call("設定値");
//VM374:2 String {"設定値"}

function fnc1(arg1,arg2,arg3){
    console.log(arg1,arg2,arg3,this);
}
//引数に配列指定
fnc1.apply("設定値",[3,3,4]);

//VM524:2 3 3 4 String {"設定値"}

//thisに値を固定させて新しい関数を作成。
let fnc2 = fnc1.bind("thisにする値");

fnc2([3,4,5]);

//出力
//(3) [3, 4, 5] String {"thisにする値"}



