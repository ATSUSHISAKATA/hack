//正規表現集
//数字文字記号の並んだ文字列から任意の文字列を抽出する。

string1 = "https://Github.com/";
string2 = "shacaran2913@xg7.so-net.ne.jp";
string3 = "私の電話番号は89345190ここに電話してください。";

//string1がhttpsから始まるかどうか調べる
let re = /^https?:/;
//正規表現リテラルは/正規表現パターン/フラグ　で作成。文字列の先頭ならば^を前につける。 0回か1回あるならば、文字の後に?をつける。
re.test(string1);
//true
//正規表現オブジェクトのtestメソッドは文字列の中にパターンがあればtrueをなければfalseを返す。

//文字列string1がgithubに関係するかどうか？
let re = /github/i;
re.test(string1);
//true
//フラグにiを指定することで大文字小文字の違いを無視可能。

//string2のメールアドレスは何か？
let re = /^[\w_.+-]+@([.+]\.[
^[a-zA-Z0-9_.+-]+@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$

//肯定先読み (?=パターン)と記述する。　パターンにマッチした先頭の部分を返す。
let regex = /word(?=Press)/;
console.log(regex.test("wordPress"));
console.log(regex.test("wordbook"));
console.log(regex.test("wordpPress"));

console.log(regex.exec("wordPress"));
console.log(regex.exec("wordbook"));
console.log(regex.exec("wordpPress"));

//出力
true
VM76:2 false
VM76:3 false
VM76:5 ["word", index: 0, input: "wordPress", groups: undefined]
VM76:6 null
VM76:7 null

let regex = /(?=word)word/;
console.log(regex.test("Press"));
console.log(regex.test("wordPress"));
console.log(regex.test("wordpPress"));

console.log(regex.exec("Press"));
console.log(regex.exec("wordbook"));
console.log(regex.exec("wordpPress"));

//出力
false
VM112:3 true
VM112:4 true
VM112:6 null
VM112:7 ["word", index: 0, input: "wordbook", groups: undefined]
VM112:8 ["word", index: 0, input: "wordpPress", groups: undefined]

//否定先読み
//パターンとマッチしないとき、その先頭の部分とマッチする。
let regex = /text(?!book)/;
console.log(regex.exec("textbook"));
console.log(regex.exec("texteditor")[0]);
//出力
null
text

//肯定後読み
//パターンと一致する場合、その末尾に一致する。
let regex = /(?<=text)book/;
console.log(regex.exec("notebook"));
console.log(regex.exec("textbook")[0]);
console.log(regex.exec("texteditor"));
//出力
null
VM78:3 book

//否定後読み
let regex = /(?<!text)book/;
console.log(regex.exec("notebook")[0]);
console.log(regex.exec("textbook"));
console.log(regex.exec("texteditor"));
//出力
book
VM83:3 null
VM83:4 null

VM78:4 null



