//正規表現集
//数字文字記号の並んだ文字列から任意の文字列を抽出する。

string1 = "https://Github.com/";
string2 = "shacaran2913@xg7.so-net.ne.jp";
string3 = "私の電話番号は89345190ここに電話してください。";

//string1がhttpsから始まるかどうか調べる
let re = /^https?:/;
//正規表現リテラルは/正規表現パターン/フラグ　で作成。文字列の先頭ならば^を前につける。 0回か1回あるならば、文字の後に?をつける。
re.test(string1);
//true
//正規表現オブジェクトのtestメソッドは文字列の中にパターンがあればtrueをなければfalseを返す。

//文字列string1がgithubに関係するかどうか？
let re = /github/i;
re.test(string1);
//true
//フラグにiを指定することで大文字小文字の違いを無視可能。

//string2のメールアドレスは何か？
let re = /^[\w_.+-]+@([.+]\.[
^[a-zA-Z0-9_.+-]+@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$

//肯定先読み (?=パターン)と記述する。　パターンにマッチした先頭の部分を返す。
let regex = /word(?=Press)/;
console.log(regex.test("wordPress"));
console.log(regex.test("wordbook"));
console.log(regex.test("wordpPress"));

console.log(regex.exec("wordPress"));
console.log(regex.exec("wordbook"));
console.log(regex.exec("wordpPress"));

//出力
true
VM76:2 false
VM76:3 false
VM76:5 ["word", index: 0, input: "wordPress", groups: undefined]
VM76:6 null
VM76:7 null

let regex = /(?=word)word/;
console.log(regex.test("Press"));
console.log(regex.test("wordPress"));
console.log(regex.test("wordpPress"));

console.log(regex.exec("Press"));
console.log(regex.exec("wordbook"));
console.log(regex.exec("wordpPress"));

//出力
false
VM112:3 true
VM112:4 true
VM112:6 null
VM112:7 ["word", index: 0, input: "wordbook", groups: undefined]
VM112:8 ["word", index: 0, input: "wordpPress", groups: undefined]

//否定先読み
//パターンとマッチしないとき、その先頭の部分とマッチする。
let regex = /text(?!book)/;
console.log(regex.exec("textbook"));
console.log(regex.exec("texteditor")[0]);
//出力
null
text

//肯定後読み
//パターンと一致する場合、その末尾に一致する。
let regex = /(?<=text)book/;
console.log(regex.exec("notebook"));
console.log(regex.exec("textbook")[0]);
console.log(regex.exec("texteditor"));
//出力
null
VM78:3 book

//否定後読み
let regex = /(?<!text)book/;
console.log(regex.exec("notebook")[0]);
console.log(regex.exec("textbook"));
console.log(regex.exec("texteditor"));
//出力
book
VM83:3 null
VM83:4 null

//キャプチャを作成　
//キャプチャグループを丸括弧で記述することで丸括弧の中のパターンのみを抽出可能。
let regex = /(\d{4})-(\d{2})-(\d{2})/;
console.log(regex.exec("私の誕生日は1997-04-12です")[0]);
console.log(regex.exec("私の誕生日は1997-04-12です")[1]);
console.log(regex.exec("私の誕生日は1997-04-12です")[2]);
console.log(regex.exec("私の誕生日は1997-04-12です")[3]);
//出力
1997-04-12
VM113:3 1997
VM113:4 04
VM113:5 12

//キャプチャグループ　丸括弧はキャプチャ以外にもグループ化にも利用されるが、キャプチャ機能は残る
let regex = /(Java|Type)Script/;
let type = regex.exec("javascript");
console.log(type[0]);
console.log(type[1]);

//出力
JavaScript
VM134:4 Java

//キャプチャ機能を捨てる場合。
let regex = /(?:\d{4})-(\d{2})-(\d{2})/;
let str = regex.exec("私の誕生日は1997-04-12です");
console.log(str[0],str[1],str[2]);
//出力
VM155:3 1997-04-12 04 12

//過去のキャプチャにマッチした値を参照する
let regex = /<(.+)>.*<\/\1>/;
let htmlelement = "<ul>Hello</ul>";
regex.exec(htmlelement)[0];
//出力
"<ul>Hello</ul>"


//具体例
//整数を取得
let number1 = "1234";
let number2 = -234;
let string = "hello";

let regex = /^[+-]?[0-9]+$/;
console.log(regex.test(number1));
console.log(regex.test(number2));
console.log(regex.test(string));

//出力
true
VM108:3 true
VM108:4 false

//英数字にマッチするパターン　英数字から始まって英数字で終わる
let regex = /^[a-zA-Z0-9]+$/;
let string1 = "hello1234";
let string2="Hello8909";
let string3 = "Hello@90";

console.log(regex.test(string1));
console.log(regex.test(string2));
console.log(regex.test(string3));

//出力
true
VM118:7 true
VM118:8 false

//浮動小数点数にマッチするパターン
//明日もう一度とき直し　javadrive 浮動小数点
let regex = /^[+-]?[0-9]+\.[0-9]+([0-9]+[eE]?[+-]?)?$/;

console.log(regex.test(23.456));
console.log(regex.test(-45.5e-6));
console.log(regex.test(123));

//出力
true
VM42:4 true
VM42:5 false

//ひらがなにマッチする部位取得。









