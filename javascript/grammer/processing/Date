//Dateオブジェクトで時間を得る。

//現在の日時のDateオブジェクト返却.
let time = new Date();
time
Wed Mar 31 2021 10:25:50 GMT+0900 (日本標準時)

//基準時間から何ミリ秒か？(日本標準時に変換する)
let time = new Date(500000);
time
Thu Jan 01 1970 09:08:20 GMT+0900 (日本標準時)

//日時指定
//月の部分は0-11で指定する。
let time = new Date(2019 4 13);
time
Mon May 13 2019 00:00:00 GMT+0900 (日本標準時)

let time = new Date("2019-4-13T12:34:34.556Z");
time
Sat Apr 13 2019 21:34:34 GMT+0900 (日本標準時)
//ISO 8601形式指定。　末尾にZをつけることでタイムゾーン指定可能。世界協定時はZ
//出力は日本標準時に変換して出力。

//Dateオブジェクトのさまざまなメソッド
let d = new Date();

//世界協定時のISOString形式に変換
d.toISOString();
"2021-04-02T02:15:27.242Z"
//世界協定時の時間を表す文字列を取得。
d.toUTCString();
"Fri, 02 Apr 2021 02:15:27 GMT"
//タイムゾーンを変更せずISO8601形式の文字列で取得。
d.toString();
"Fri Apr 02 2021 11:15:27 GMT+0900 (日本標準時)"
//ロケール（言語や国、地域の設定)を指定して、そのロケールで使用する方法を用いて、日時の文字列を取得可能。
d.toLocaleDateString("fr-FR");
"01/02/2021"
//ローカルをタイムゾーンとした場合の文字列を返す。
d.toTimeString();
"00:00:00 GMT+0900 (日本標準時)"
//ロケールを指定して、そのロケールの形式で時間を返す。
d.toLocaleTimeString("zh-CN");
"上午12:00:00"
//1970/1/1/UTCからの経過ミリ秒を取り出す。
d.valueOf();
1612105200000
//タイムゾーンとの相殺を分単位で計算する。
d.getTimezoneOffset();
-540

//世界協定時(UTC)でDateオブジェクトを作成。
let d = new Date(Date.UTC(1999,0,1));

//ISO8601形式の文字列で世界協定時で時刻を取り出す。
d.toISOString();
"1999-01-01T00:00:00.000Z"

//文字列はロケールがアメリカの場合の文字列が使われる。　世界協定時での時刻を取り出す。
d.toUTCString();
"Fri, 01 Jan 1999 00:00:00 GMT"

//文字列はロケールがアメリカの場合の文字列が使われる。　現地での時刻を取り出す。
d.toString();
"Fri Jan 01 1999 09:00:00 GMT+0900 (日本標準時)"

//文字列はロケールがアメリカの場合の文字列が使われる。　現地での日付を取り出す。
"Fri Jan 01 1999"

//ロケールを指定して、現地での日付を取得。　ロケールがなければ、現地でのロケールとなる。
d.toLocaleDateString();
"1999/1/1"

//イギリスでの今から100年前の時間をフランス圏の形式で取得せよ。
let d = new Date();
let d1 = d.valueOf()-100*365*24*60*60*1000;
let d2 = new Date(d1);
let d3 = d2.toISOString();
let d4 = new Date(d3);
let d5 = d4.toLocaleDateString("fr-FR");
d5

"27/04/1921"






